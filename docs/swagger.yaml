definitions:
  httpresponse.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  v1.closeReceptionResponse:
    description: Ответ с сообщением о закрытие приемки
    properties:
      message:
        description: Сообщение о статусе закрытия приёмки
        type: string
    type: object
  v1.createPVZRequest:
    description: Запрос для создания ПВЗ
    properties:
      city:
        description: |-
          Город
          enum: Москва, Санкт-Петербург, Казань
        type: string
    type: object
  v1.createPVZResponse:
    description: Ответ с данными о созданном ПВЗ
    properties:
      city:
        description: |-
          Город
          enum: Москва, Санкт-Петербург, Казань
        type: string
      id:
        description: |-
          Уникальный идентификатор ПВЗ
          format: uuid
        type: string
      registration_date:
        description: |-
          Дата регистрации ПВЗ
          format: date-time
        type: string
    type: object
  v1.createProductRequest:
    description: Запрос для добавления товара
    properties:
      pvzId:
        description: |-
          Идентификатор ПВЗ
          format: uuid
        type: string
      type:
        description: |-
          Тип товара
          enum: электроника, одежда, обувь
        type: string
    type: object
  v1.createProductResponse:
    description: Ответ с данными о добавленном товаре
    properties:
      dateTime:
        description: |-
          Дата и время добавления товара
          format: date-time
        type: string
      id:
        description: |-
          Уникальный идентификатор товара
          format: uuid
        type: string
      receptionId:
        description: |-
          Идентификатор приёмки
          format: uuid
        type: string
      type:
        description: Тип товара
        type: string
    type: object
  v1.createReceptionRequest:
    description: Запрос для создания приёмки
    properties:
      pvz_id:
        description: |-
          Идентификатор ПВЗ
          format: uuid
        type: string
    type: object
  v1.createReceptionResponse:
    description: Ответ с данными о созданной приёмке
    properties:
      dateTime:
        description: |-
          Дата и время создания приёмки
          format: date-time
        type: string
      id:
        description: |-
          Уникальный идентификатор приёмки
          format: uuid
        type: string
      pvzId:
        description: |-
          Идентификатор ПВЗ
          format: uuid
        type: string
      status:
        description: |-
          Статус приёмки
          enum: open, close
        type: string
    type: object
  v1.deleteProductResponse:
    description: Ответ с сообщением об удалении товара
    properties:
      message:
        description: Сообщение об успешном удалении товара
        type: string
    type: object
  v1.dummyLoginRequest:
    description: Запрос для получения тестового токена авторизации
    properties:
      role:
        description: |-
          Роль пользователя (employee или moderator)
          enum: employee,moderator
        type: string
    type: object
  v1.dummyLoginResponse:
    description: Ответ с тестовым токеном авторизации
    properties:
      token:
        description: JWT-токен для аутентификации
        type: string
    type: object
  v1.loginRequest:
    description: Запрос для аутентификации пользователя
    properties:
      email:
        description: |-
          Электронная почта пользователя
          format: email
        type: string
      password:
        description: Пароль пользователя
        type: string
    type: object
  v1.loginResponse:
    description: Ответ с токеном авторизации после успешной аутентификации
    properties:
      token:
        description: JWT-токен для аутентификации
        type: string
    type: object
  v1.registerRequest:
    description: Запрос для регистрации нового пользователя
    properties:
      email:
        description: |-
          Электронная почта пользователя
          format: email
        type: string
      password:
        description: Пароль пользователя
        type: string
      role:
        description: |-
          Роль пользователя (employee или moderator)
          enum: employee,moderator
        type: string
    type: object
  v1.registerResponse:
    description: Ответ с данными зарегистрированного пользователя
    properties:
      email:
        description: |-
          Электронная почта пользователя
          format: email
        type: string
      id:
        description: |-
          Уникальный идентификатор пользователя
          format: uuid
        type: string
      role:
        description: |-
          Роль пользователя (employee или moderator)
          enum: employee,moderator
        type: string
    type: object
info:
  contact: {}
  description: Сервис для управления ПВЗ и приемкой товаров
  title: Pickup Point API
  version: 1.0.0
paths:
  /api/v1/dummyLogin:
    post:
      consumes:
      - application/json
      description: Получение тестового токена авторизации по роли
      parameters:
      - description: Данные для входа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.dummyLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает JWT токен для аутентификации
          schema:
            $ref: '#/definitions/v1.dummyLoginResponse'
        "400":
          description: Некорректное тело запроса
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      summary: Dummy login
      tags:
      - auth
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя
      parameters:
      - description: Учетные данные
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Возвращает JWT токен для аутентификации
          schema:
            $ref: '#/definitions/v1.loginResponse'
        "400":
          description: Некорректное тело запроса
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "401":
          description: Неверные учетные данные
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      summary: Login
      tags:
      - auth
  /api/v1/products:
    post:
      consumes:
      - application/json
      description: Добавляет товар в последнюю незакрытую приёмку в указанном ПВЗ.
        Доступно только для сотрудников ПВЗ. Требуется незакрытая приёмка.
      parameters:
      - description: Данные для добавления товара
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.createProductRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.createProductResponse'
        "400":
          description: Неверный идентификатор ПВЗ, тип товара или отсутствие открытой
            приёмки
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Добавление товара в приёмку
      tags:
      - products
  /api/v1/pvz:
    post:
      consumes:
      - application/json
      description: 'Только для модераторов. Создаёт пункт выдачи заказов (ПВЗ) в одном
        из поддерживаемых городов: Москва, Санкт-Петербург, Казань.'
      parameters:
      - description: Данные для создания ПВЗ
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.createPVZRequest'
      produces:
      - application/json
      responses:
        "201":
          description: ПВЗ успешно создан
          schema:
            $ref: '#/definitions/v1.createPVZResponse'
        "400":
          description: Неверный город или некорректное тело запроса
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "403":
          description: 'Доступ запрещён: требуется роль модератора'
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Создание ПВЗ
      tags:
      - pvz
  /api/v1/pvz/{pvzId}/close_last_reception:
    post:
      consumes:
      - application/json
      description: Закрывает последнюю открытое приёмку в ПВЗ. Доступно только для
        сотрудников ПВЗ. Приёмка должна быть открытой.
      parameters:
      - description: Идентификатор ПВЗ
        in: path
        name: pvzId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1.closeReceptionResponse'
        "400":
          description: Неверный идентификатор ПВЗ или приёмка не найдена
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Закрытие последней приёмки
      tags:
      - receptions
  /api/v1/pvz/{pvzId}/delete_last_product:
    post:
      description: Удаляет последний добавленный товар в последней незакрытой приёмке
        указанного ПВЗ. Доступно только для сотрудников ПВЗ. Требуется наличие незакрытой
        приёмки и хотя бы одного товара в ней.
      parameters:
      - description: Идентификатор ПВЗ (uuid)
        in: path
        name: pvzId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Сообщение об успешном удалении
          schema:
            $ref: '#/definitions/v1.deleteProductResponse'
        "400":
          description: Неверный идентификатор ПВЗ, отсутствие открытой приёмки или
            отсутствие товаров в приёмке
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Удаление последнего добавленного товара
      tags:
      - products
  /api/v1/receptions:
    post:
      consumes:
      - application/json
      description: Создаёт новую приёмку товаров в указанном ПВЗ. Доступно только
        для сотрудников ПВЗ. Нельзя создать, если есть открытая приёмка.
      parameters:
      - description: Данные для создания приёмки
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.createReceptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/v1.createReceptionResponse'
        "400":
          description: Неверный идентификатор ПВЗ или открытая приёмка существует
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "401":
          description: Пользователь не авторизован
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "403":
          description: Доступ запрещён
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      security:
      - JWT: []
      summary: Создание приёмки товаров
      tags:
      - receptions
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Регистрация нового пользователя
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/v1.registerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Возвращает данные зарегистрированного пользователя
          schema:
            $ref: '#/definitions/v1.registerResponse'
        "400":
          description: Некорректное тело запроса
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "409":
          description: Пользователь с таким email уже существует
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
        "500":
          description: Внутренняя ошибка сервера
          schema:
            $ref: '#/definitions/httpresponse.ErrorResponse'
      summary: Register
      tags:
      - auth
schemes:
- http
securityDefinitions:
  JWT:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
