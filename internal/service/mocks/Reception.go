// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/GlebMoskalev/go-pickup-point-api/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Reception is an autogenerated mock type for the Reception type
type Reception struct {
	mock.Mock
}

// CloseLastReception provides a mock function with given fields: ctx, pvzID
func (_m *Reception) CloseLastReception(ctx context.Context, pvzID string) error {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for CloseLastReception")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, pvzID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, pvzID
func (_m *Reception) Create(ctx context.Context, pvzID string) (*entity.Reception, error) {
	ret := _m.Called(ctx, pvzID)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Reception
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Reception, error)); ok {
		return rf(ctx, pvzID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Reception); ok {
		r0 = rf(ctx, pvzID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Reception)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, pvzID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReception creates a new instance of Reception. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReception(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reception {
	mock := &Reception{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
